# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET      /                                    controllers.Application.index
GET      /about                               controllers.Application.about
GET      /contribute                               controllers.Application.contribute
GET      /contact                             controllers.Application.contact
GET      /language/:locale                    controllers.Application.language(locale: String)


GET      /me                                  controllers.Account.index
GET      /me/edit                             controllers.Account.edit
POST     /me                             	  controllers.Account.update
GET      /users/:userId/profile               controllers.File.serveUserProfilePicture(userId: String)


# Chat routes available only for testing
# GET     /chat                       		  controllers.Chat.index
# GET     /chat/:roomId               		  controllers.Chat.room(roomId:Long)
# POST    /chat/create                		  controllers.Chat.create
GET      /chat/establish/:roomId              controllers.Chat.establish(roomId:String)
GET      /chat/log/:roomId                    controllers.Chat.prevMessages(roomId:String)


## WALL management
# list walls
GET      /wall                                controllers.Wall.index
# create new wall
POST     /wall                                controllers.Wall.create
# delete wall
DELETE   /wall/:wallId                        controllers.Wall.delete(wallId:String)
# list walls as tree
GET      /tree                                controllers.Wall.tree

# static view only page
#GET      /wall/:wallId/view                   controllers.Wall.view(wallId:String)
# access wall as stage
GET      /wall/:wallId                        controllers.Wall.stage(wallId:String)

# websocket API
GET      /wall/sync/:wallId                   controllers.Wall.sync(wallId:String)
# HTTP API
GET      /wall/comet/:wallId                  controllers.Wall.listen(wallId:String)
POST     /wall/comet/:wallId                  controllers.Wall.speak(wallId:String)
# misc. 
POST     /wall/view/:wallId                   controllers.Wall.setView(wallId:String)
GET      /wall/search/:wallId/:keyword        controllers.Wall.search(wallId:String, keyword:String)


POST     /wall/file/:wallId                   controllers.Wall.uploadFile(wallId:String)
GET      /wall/file/:wallId                   controllers.Wall.infoFile(wallId:String)
PUT      /wall/file/:wallId                   controllers.Wall.replaceFile(wallId:String)
DELETE   /wall/file/:wallId                   controllers.Wall.deleteFile(wallId:String)

GET      /group                               controllers.Group.index
GET      /group/:groupId                      controllers.Group.show(groupId:String)
POST     /group                               controllers.Group.create
GET      /group/:groupId/user.json            controllers.Group.getUsers(groupId:String)
# add user to group with user email
POST     /group/:groupId/user/with_email      controllers.Group.addUser(groupId:String)
DELETE   /group/:groupId/user/:userId/id      controllers.Group.removeUser(groupId:String, userId:String)
GET      /group/:groupId/wall.json            controllers.Group.getWalls(groupId:String)
GET      /group/:groupId/wall/shared.json     controllers.Group.getSharedWalls(groupId:String)
POST     /group/:groupId/wall                 controllers.Group.createWall(groupId:String)
POST     /group/:groupId/wall/:wallId         controllers.Group.addWall(groupId:String, wallId:String)
DELETE   /group/:groupId/wall/:wallId         controllers.Group.removeWall(groupId:String, wallId:String)

GET      /dropbox/authorize                   controllers.Dropbox.authorize
GET      /dropbox/callback                    controllers.Dropbox.callback
GET      /dropbox/account/info                controllers.Dropbox.account
GET      /dropbox/metadata                    controllers.Dropbox.metadata
GET      /dropbox/shares                      controllers.Dropbox.shares
GET      /dropbox/media                       controllers.Dropbox.media
GET      /dropbox/files                       controllers.Dropbox.downloadFiles
POST     /dropbox/files                       controllers.Dropbox.uploadFiles

GET     /sandbox/editor                       controllers.Sandbox.editor

# Image scaling for play-res plugin
GET    /res/:width/:height/:file      se.digiplant.scalr.ScalrResAssets.at(file, width: Int, height: Int)
# Image resizing for any folder specified as path parameter (will cache thumbnails using play-res plugin)
GET    /scalr/:width/:height/*file    se.digiplant.scalr.ScalrAssets.at(path="/public/files", file, width: Int, height: Int)

# Webjars
GET      /webjars/*file                    controllers.WebJarAssets.at(file)
# Map static resources from the /public folder to the /assets URL path
GET      /assets/*file                        controllers.Assets.at(path="/public", file)
GET      /upload/*file                        controllers.File.serve(file)
GET      /thumb/:width/:height/*file   		  controllers.File.thumb(file:String, width:Integer, height:Integer)
#POST    /file                 				  controllers.File.upload
#GET     /file                 				  controllers.File.info
#PUT     /file                 				  controllers.File.replace
#DELETE  /file                 				  controllers.File.delete



########################
# Secure Social Routing
########################
# Login page
GET     /login                      securesocial.controllers.LoginPage.login
GET     /logout                     securesocial.controllers.LoginPage.logout

# User Registration and password handling 
GET     /signup                     securesocial.controllers.Registration.startSignUp
POST    /signup                     securesocial.controllers.Registration.handleStartSignUp
GET     /signup/:token              securesocial.controllers.Registration.signUp(token)
POST    /signup/:token              securesocial.controllers.Registration.handleSignUp(token)
GET     /reset                      securesocial.controllers.Registration.startResetPassword
POST    /reset                      securesocial.controllers.Registration.handleStartResetPassword
GET     /reset/:token               securesocial.controllers.Registration.resetPassword(token)
POST    /reset/:token               securesocial.controllers.Registration.handleResetPassword(token)
GET     /password                   securesocial.controllers.PasswordChange.page
POST    /password                   securesocial.controllers.PasswordChange.handlePasswordChange
# renew session timeout (usually for websockets) 
GET		/renew						controllers.Application.renewSession

# Providers entry points
GET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)
GET     /not-authorized             securesocial.controllers.ProviderController.notAuthorized
####### Secure Social End

